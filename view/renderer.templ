package view

import (
	"errors"
	"net/http"
	"strconv"

	"github.com/labstack/echo/v4"

	"github.com/bacchus-snu/sgs/model"
	"github.com/bacchus-snu/sgs/pkg/auth"
)

var Renderer echo.Renderer = renderer{}

type renderer struct{}

type ctxKey string

const (
	ctxKeyCSRF ctxKey = "csrf"
	ctxKeyUser ctxKey = "user"
)

func ctxCSRF(ctx context.Context) string {
	return ctx.Value(ctxKeyCSRF).(string)
}

func ctxUser(ctx context.Context) *auth.User {
	return ctx.Value(ctxKeyUser).(*auth.User)
}

func (r renderer) Render(w io.Writer, _ string, data any, c echo.Context) error {
	ctx := c.Request().Context()

	// extract values from echo context, inject to render context
	if user := c.Get("user"); user != nil {
		ctx = context.WithValue(ctx, ctxKeyUser, user)
	}
	if csrfToken := c.Get("csrf"); csrfToken != nil {
		ctx = context.WithValue(ctx, ctxKeyCSRF, csrfToken)
	}

	switch v := data.(type) {
	case templ.Component:
		return v.Render(ctx, w)
	default:
		// TODO
		return echo.ErrInternalServerError
	}
}

func ErrorHandler(err error, c echo.Context) {
	// common pass-through errors from model layer
	switch {
	case errors.Is(err, model.ErrNotFound):
		err = echo.ErrNotFound
	case errors.Is(err, model.ErrInvalid):
		err = echo.ErrBadRequest
	}

	herr, ok := err.(*echo.HTTPError)
	if !ok {
		// TODO: log
		herr = echo.ErrInternalServerError
	}

	c.Render(herr.Code, "error", renderError(herr.Code))
}

templ renderError(code int) {
	@page("Error") {
		<h1>Error { strconv.Itoa(code) }</h1>
		<p>{ http.StatusText(code) }</p>
	}
}
